Index: Assignment4/P2010CS1034_PyQt.py
===================================================================
--- Assignment4/P2010CS1034_PyQt.py	(revision 0)
+++ Assignment4/P2010CS1034_PyQt.py	(revision 0)
@@ -0,0 +1,170 @@
+#!/usr/bin/env python
+from PyQt4 import QtCore, QtGui
+from PyQt4.QtGui import *
+import sys
+
+class App(QtGui.QApplication):													#App:- start and loop an application
+	def __init__(self):
+		super(App,self).__init__(sys.argv)
+			
+	def loop(self):
+		return sys.exit(self.exec_())
+
+class Windows(QtGui.QWidget):														#class for making a window:- x & y=position; width & height=window size 
+	def __init__(self,title,x,y,width,height):						# constructor
+		super(Windows, self).__init__(parent=None)
+		self.setWindowTitle(title)
+		self.setGeometry(x,y,width,height)
+		
+	def show_window(self,box):														#setlayout and show window
+		self.setLayout(box)
+		self.show()
+	
+	def change_title(self,title):
+		self.setWindowTitle(title)		
+
+	def move_to_centre(self):															# for centring a window on screen
+		screen = QtGui.QDesktopWidget().screenGeometry()
+		size = self.geometry()
+		self.move((screen.width()-size.width())/2, (screen.height()-size.height())/2)
+		
+	def close_window(self):																# for closing window
+		self.close()
+	
+	def change_color(self,color):													# change color of window
+		self.setStyleSheet("QWidget {background-color: %s; }"%color)
+	
+	def reset_color(self):
+		self.setStyleSheet("QWidget {background-color: %s; }"%None)
+
+class Statictext(QtGui.QLabel):													#Statictext:- text=to make label ,frm=parent window
+	def __init__(self,frm,text):													#constructor
+		super(Statictext, self).__init__(text)
+		
+	def set_text(self,text):
+		self.setText(text)
+
+class button(QtGui.QPushButton):												#button:- name=name of the button; frm=parent window; text=name of button
+	def __init__(self,frm,text):													#method= function to call on clicking; *args=arguments of function
+		super(button, self).__init__(text)
+		self.setFocusPolicy(QtCore.Qt.NoFocus)
+			
+	def bind(self,method,*args):													#bind:- binding button to function
+		if (method!=None and not args) or (method!=None and args[0]==None):
+			self.clicked.connect(method)
+		elif (method!=None and args!=None):
+			self.connect(self,QtCore.SIGNAL('clicked()'),(lambda x = args : method(*x)))
+
+class CheckBox(QtGui.QCheckBox):												#CheckBox:- text=checkbox label; frm=parent window; (value=true or false for activating or deactivating initially)
+	def __init__(self,frm,text):													#constructor
+		super(CheckBox, self).__init__(text)
+		self.setFocusPolicy(QtCore.Qt.NoFocus)
+
+	def get_state(self):																	#state(check/uncheck) of checkbox
+		return self.checkState()
+	
+	def bind(self,method,*args):													#binding to some function
+		if (method!=None and not args) or (method!=None and args[0]==None):
+			self.clicked.connect(method)
+		elif (method!=None and args!=None):
+			self.connect(self,QtCore.SIGNAL('clicked()'),(lambda x = args : method(x)))
+
+class ComboBox(QtGui.QComboBox):												#ComboBox:- name=name of combobox;frm=parent window; group=items to add in combobox
+	def __init__(self,frm,name,group):										#constructor
+		super(ComboBox, self).__init__()
+		self.setFocusPolicy(QtCore.Qt.NoFocus)
+		self.setStyleSheet("QComboBox { combobox-popup: 0; }")
+		if(name!=None):
+			self.addItem(name)
+		for i in group:
+			self.addItem(str(i))
+	
+	def get_value(self):																	#get selected text
+		return self.currentText()
+
+class MultiTextBox(QtGui.QTextEdit):										#MultiTextBox:-multi-line text box; frm=parent window
+	def __init__(self,frm):																#constructor
+		super(MultiTextBox,self).__init__()
+	
+	def set_text(self,text):
+		self.setText(text)
+	
+	def get_text(self):
+		return self.toPlainText()
+
+class SingleTextBox(QtGui.QLineEdit):										#SingleTextBox:-single-line text box; frm=parent window; visibility= 0/1 for password_protected/normal mode
+	def __init__(self,frm,visibility):										#constructor
+		super(SingleTextBox,self).__init__()
+		if visibility==0:
+			self.setEchoMode(self.Password)
+		else:
+			pass
+
+	def set_text(self,text):
+		self.setText(text)
+	
+	def get_text(self):
+		return self.text()
+
+class RadioButtonList(QtGui.QButtonGroup):							#radiobuttonlist:- group=radio button labels
+	def __init__(self,frm,group,ch1,ch2,st,grid,start):		#frm=parent window; ch1=0/1 for info/question; ch2=true answer's no.; st=label; i=row of starting radiobuttons
+		super(RadioButtonList,self).__init__()
+		self.rb={}
+		self.group=group
+		self.i=len(group)
+		self.x=ch1
+		self.y=ch2-1
+		self.text=st
+		for i in range(0,len(group)):
+			self.rb[i]=QtGui.QRadioButton(group[i])
+			self.rb[i].setFocusPolicy(QtCore.Qt.NoFocus)
+			self.rb[i].connect(self.rb[i],QtCore.SIGNAL('clicked()'),self.onclick)
+			self.addButton(self.rb[i],i)
+			grid.add(self.rb[i],start+i,0,1)
+
+	def onclick(self):
+		self.check=self.checkedId()
+		if self.x==1:
+			if self.check==self.y:
+				self.text.set_text("True")
+			else:
+				self.text.set_text("False")
+		elif self.x==0:
+			self.text.set_text( " Selected : " + self.group[self.checkedId()] )
+
+class Halignment(QtGui.QHBoxLayout):										#horizontal box:-alignment= left/right/center alignment of widgets;
+	def __init__(self,*alignment):												#	 list=list of widget/layout; i=row of starting radiobuttons
+		super(Halignment,self).__init__()
+		if alignment and alignment[0]=="right":
+			self.setAlignment(QtCore.Qt.AlignRight)
+		elif alignment and alignment[0]=="left":
+			self.setAlignment(QtCore.Qt.AlignLeft)
+		else:
+			self.setAlignment(QtCore.Qt.AlignHCenter)
+	
+	def add(self,item,i):
+		if(item.isWidgetType()==True):
+				self.addWidget(item)
+		elif(item.isWidgetType()==False):
+				self.addLayout(item)
+
+class Valignment(QtGui.QVBoxLayout):										#vertical box:- list=items to add in vbox; i=row of starting radiobuttons
+		def __init__(self):
+			super(Valignment,self).__init__()
+
+		def add(self,item,i):
+			if(item.isWidgetType()==True):
+				self.addWidget(item)
+			elif(item.isWidgetType()==False):
+				self.addLayout(item)
+
+class Alignment(QtGui.QGridLayout):											#alignment:- making grid; widget=to add to grid; row=row number; column=column number; cspan=colunm span
+	def __init__(self,parent):
+		super(Alignment,self).__init__()
+		
+	def add(self,widget,row,column,cspan):
+			if(widget.isWidgetType()==True):
+				self.addWidget(widget,row,column,1,cspan)
+			elif(widget.isWidgetType()==False):
+				self.addLayout(widget,row,column,1,cspan)
+
Index: Assignment4/P2010CS1007_Tkinter.py
===================================================================
--- Assignment4/P2010CS1007_Tkinter.py	(revision 0)
+++ Assignment4/P2010CS1007_Tkinter.py	(revision 0)
@@ -0,0 +1,148 @@
+from Tkinter import *
+
+class Windows():
+	def __init__(self,titl,px,py,x,y):
+		self.titl=titl
+		self.w=x
+		self.h=y
+		self.frame=Tk()
+		self.frame.geometry('%dx%d+%d+%d'%(x,y,px,py))
+		self.frame.title(titl)
+
+	def show_window(self,box):
+		pass
+
+	def change_title(self,tit):
+		self.frame.title(tit)
+
+	def move_to_centre(self):
+		sw = self.frame.winfo_screenwidth()
+		sh = self.frame.winfo_screenheight()
+		x = (sw - self.w)/2
+		y = (sh - self.h)/2
+		self.frame.geometry('%dx%d+%d+%d' % (self.w, self.h, x, y))
+		
+	def change_color(self,frm):
+		self.frame.configure(background=frm)
+
+	def reset_color(self):
+		self.frame.configure(background="#D9D9D9")
+
+class RadioButtonList():
+	def __init__(self,frm, name, ch1, ch2,st,grid,i):
+		self.frame = Frame(frm.frame)
+		self.frame.grid()
+		self.ch1=ch1
+		self.ch2=ch2
+		self.i=i
+		self.st=st
+		v = IntVar()
+		self.v=v
+		self.shuu=name
+		self.length = len(name)
+		self.rb={}
+		r=0
+		self.r=r
+		x=1
+		for txt in name:
+			self.rb[r]=Radiobutton(frm.frame,text=txt,padx = 20,variable=v,value=x, command = self.onclick)
+			self.rb[r].grid(row=i+r,column=0,sticky=W,pady=2)
+			r= r+1
+			x=x+1
+			self.r=r
+
+	def onclick(self):
+		if(self.ch1==1):
+			if(self.v.get()==self.ch2):
+				self.st.set_text('true')
+				v.add(self.st,self.i+self.r+1)
+			else:
+				self.st.set_text('false')
+				v.add(self.st,self.i+self.r+1)
+		else:
+			self.st.set_text('Your choice:'+self.shuu[self.v.get()-1])
+
+class Statictext():
+	def __init__(self,frm,text):
+		self.frame = Frame(frm.frame)
+		self.frame.grid()
+		self.lab=StringVar()
+		self.widget= Label(frm.frame,textvariable= self.lab)
+		self.lab.set(text)
+
+	def set_text(self,name):
+		self.lab.set(name)
+
+class button():
+	def __init__(self,frm,name):
+		self.frame = Frame(frm.frame)
+		self.frame.grid()
+		self.widget = Button(frm.frame)
+		self.widget.configure(text=name,fg="red")
+
+	def bind(self,fn,*arc):
+		self.widget.bind("<Button-1>",fn)
+
+class SingleTextBox():
+	def __init__(self,frm,visibilty):
+		self.frame = Frame(frm.frame)
+		self.frame.grid()		
+		self.v = StringVar()
+		if visibilty==1:
+			self.widget=Entry(width=30,background='white',textvariable=self.v)
+		if visibilty==0:
+			self.widget=Entry(width=30,background='white', show="*",textvariable=self.v)
+		
+	def set_text(self,text):
+		self.v.set(text)
+
+	def get_text(self):
+		x = self.widget.get()
+		return x
+
+class MultiTextBox():
+	def __init__(self,frm):
+		self.frame = Frame(frm.frame)
+		self.frame.grid()		
+		self.widget=Text(frm.frame,height=10,width=30,background='white')
+
+class CheckBox():
+	def __init__(self,frm,name):
+		self.frame = Frame(frm.frame)
+		self.frame.grid()		
+		self.var=IntVar()
+		self.widget= Checkbutton(frm.frame,text=name,variable=self.var)
+
+	def get_state(self):
+		return not self.var.get()
+
+	def bind(self,fn,*arc):
+		self.widget.bind("<Button-1>",fn)
+
+class ComboBox():
+	def __init__(self,frm,hello,arg):
+		self.arg=arg
+		self.frame = Frame(frm.frame)
+		self.frame.grid()
+		var = IntVar()
+		var.set(hello)
+		self.widget = OptionMenu(frm.frame, var, *self.arg)
+		self.widget.state = []
+	def get_value(self):
+		pass
+    
+class Alignment():
+	def __init__(self,frm):
+		self.frame = Frame(frm.frame)
+		self.frame.grid()		
+
+	def add(self,widget,i,j,span):
+		self.widget=widget.widget
+		self.widget.grid(row=i,column=j,sticky=N,columnspan=span, rowspan=1,pady=2)
+
+class App():
+	def __init__(self):
+		pass
+	def loop(self):
+		mainloop()	
+
Index: Assignment4/P2010CS1038_PyGTK.py
===================================================================
--- Assignment4/P2010CS1038_PyGTK.py	(revision 0)
+++ Assignment4/P2010CS1038_PyGTK.py	(revision 0)
@@ -0,0 +1,182 @@
+''' This program demonstrates the library used in API '''
+import pygtk
+pygtk.require('2.0')
+import gtk
+
+class Statictext:
+		def __init__(self,frame,text):
+			self.widget=gtk.Label(text)
+			self.widget.show()
+		def set_text(self,text):
+			self.widget.set_text(text)
+			self.widget.show()
+			
+class Windows:
+		def __init__(self,title,x,y,width,height):
+			self.frame= gtk.Window(gtk.WINDOW_TOPLEVEL)	
+			self.frame.connect("delete_event", lambda w,e: gtk.main_quit())	
+			self.frame.set_title(title)
+			self.frame.set_border_width(10)
+			self.frame.set_default_size(width, height)
+			self.frame.set_resizable(True)
+			self.frame.move(x,y)
+			
+		def change_title(self,title):
+			self.frame.set_title(title)
+			return 
+					
+		def move_to_centre(self):
+			self.frame.set_position(gtk.WIN_POS_CENTER_ALWAYS)
+			return 
+			
+		def close_window(self):
+			gtk.main_quit()	
+		
+		def change_color(self,color):
+			color = gtk.gdk.color_parse(color)
+			self.frame.modify_bg(gtk.STATE_NORMAL,color)
+			
+		def reset_color(self):
+			self.frame.modify_bg(gtk.STATE_NORMAL,None)
+				
+		def show_window(self,box):	
+			self.frame.add(box.widget)
+			self.frame.show()	
+			gtk.main()
+			return			
+				
+class SingleTextBox:
+		def __init__(self,frame,visibility):
+			self.frm=frame
+			self.widget=gtk.Entry(max=0)
+			self.widget.set_text("")
+			text=self.widget.get_text()
+			
+			if visibility==False:
+				self.widget.set_visibility(False)
+			elif visibility==True:
+				self.widget.set_visibility(True)	
+			
+			self.widget.set_editable(True)
+			self.widget.show()
+		
+		def set_text(self,text1):
+			self.widget.set_text(text1)
+			return
+				
+		def get_text(self):
+			self.string=self.widget.get_text()
+			return self.string
+		
+				
+class MultiTextBox:			
+		def __init__(self,frame):
+			self.frm=frame
+			self.string=gtk.TextBuffer()
+			self.string.set_text("type text here")
+			self.widget=gtk.TextView(self.string)
+			self.widget.set_editable(True)
+			self.widget.set_cursor_visible(True)
+			self.widget.show()
+			
+		def set_text(self,text):
+			self.widget.set_buffer(text)
+			
+		def get_text(self):
+			str1=self.widget.get_buffer()
+			return str1							
+			
+class button:
+		def __init__(self,frame,Label):
+			self.frm=frame
+			self.widget=gtk.Button(label=Label)	
+			self.widget.show()
+		def bind(self,method,*args):
+			if (method!=None and not args) or (method !=None and args[0]==None):
+				self.widget.connect("clicked",method)
+			elif (method!=None and args!=None):
+				self.widget.connect("clicked",method,*args)
+		
+class ComboBox:
+		def __init__(self,frame,name,list_Values):				
+			self.frm=frame
+			self.widget=gtk.combo_box_new_text()
+			self.widget.append_text(name)
+			for i in list_Values:
+				self.widget.append_text(i)
+			if name!=None:	
+				self.widget.set_active(0)	
+			self.widget.show()
+	
+		def get_value(self):
+			item_text = self.widget.get_active_text()
+			return item_text
+		
+class CheckBox:
+		def __init__(self,frame, Label):					
+			self.label=Label
+			self.widget=gtk.CheckButton(self.label)
+			self.frm=frame
+			self.widget.show()			
+			
+		def bind(self,method,*args):
+			if (method!=None and not args) or (method !=None and args[0]==None):
+				self.widget.connect("toggled",method)
+			elif (method!=None and args!=None):
+				self.widget.connect("toggled",method,*args)
+		
+		def get_state(self):
+			if self.widget.get_active():
+				return True
+			return False	
+			
+			
+class RadioButtonList:
+		def __init__(self,frame,Labels,ch1,ch2,st,grid,row):
+			self.widget2=[]
+			self.ch1=ch1
+			self.ch2=ch2
+			self.st=st.widget
+			self.frame=frame
+			self.b_labels=Labels
+			self.Button1=gtk.RadioButton(None,None)
+			self.widget2.append(self.Button1)
+			for i in self.b_labels:
+				self.b=gtk.RadioButton(self.Button1, i)
+				grid.widget.attach(self.b,0,1,row,row+1,xoptions=gtk.EXPAND|gtk.FILL, yoptions=gtk.EXPAND, xpadding=0, ypadding=0)
+				row=row+1
+				self.widget2.append(self.b)
+				self.b.show()
+				self.b.connect("toggled",self.toggle)
+				
+		def toggle(self,label):
+			count=-2
+			if self.ch1==1:
+				if(self.widget2[self.ch2].get_active()):
+					print self.ch2-1,self.widget2[self.ch2-1]
+					self.st.set_text("True")					
+				else:
+					self.st.set_text("False")
+			else:
+				for i in self.widget2:
+					count=count+1
+					if i.get_active():
+						l="Your choice is:"
+						self.st.set_text(l+self.b_labels[count])
+					
+
+class Alignment:
+		def __init__(self,frame):
+			self.widget=gtk.Table(10,5,False)
+			
+		def add(self,v,row,column,columnspan):
+			self.widget.attach(v.widget,column,column+columnspan,row,row+1,xoptions=gtk.EXPAND|gtk.FILL, yoptions=gtk.EXPAND, xpadding=0, ypadding=0)
+			self.widget.show()	
+				
+
+class App:
+		def __init__(self):
+			pass
+		def loop(self):
+			pass	
+
Index: Assignment4/Demo.py
===================================================================
--- Assignment4/Demo.py	(revision 0)
+++ Assignment4/Demo.py	(revision 0)
@@ -0,0 +1,62 @@
+import sys
+
+def fasd(event):
+	if(chek.get_state()):
+		frame.change_color('#F5BCA9')
+	else:
+		frame.reset_color()
+
+def change(event):
+		frame.change_title(t1.get_text())
+	
+if __name__ == '__main__':
+	x=raw_input("Enter 1 for PyGTK, 2 for PyQT, 3 for WxPython, 4 for Tkinter : ")
+	if x=='1':
+		from P2010CS1038_PyGTK import *
+	elif x=='2':
+		from P2010CS1034_PyQt import *
+	elif x=='3':
+		from P2010CS1067_WxPython import *
+	elif x=='4':
+		from P2010CS1007_Tkinter import *	
+	else:
+		print "Please Enter a valid number."
+		sys.exit()
+
+	app =App()
+	frame= Windows("What\'s up buddy!!!",250,250,400,400)
+	frame.move_to_centre()
+	a=Alignment(frame)
+	
+	st0=Statictext(frame,"Enter title to be changed")
+	st1=Statictext(frame,"Which programming language you prefer?")
+	st2=Statictext(frame,"What is your branch?")
+	s1=Statictext(frame,"")
+	
+	t1=SingleTextBox(frame,1)
+	a.add(t1,1,0,2)
+	
+	a.add(st0,0,0,2)
+	b1=button(frame,"Submit")
+	b1.bind(change)
+	a.add(b1,1,2,2)
+	
+	a.add(st2,2,0,1)
+	rb=RadioButtonList(frame,['Computer Science','Electrical','Mechanical','Civil'],0,2,s1,a,3)
+	a.add(s1,7,0,1)
+	
+	combo=ComboBox(frame,'Select your choice',["C","C++","Java","Python"])
+	chek=CheckBox(frame,'Change Background Color')
+	
+	chek.bind(fasd)
+								
+	value=combo.get_value()
+	state=chek.get_state()
+	a.add(st1,8,0,1)
+	a.add(combo,9,0,1)
+	a.add(chek,10,0,1)
+	
+	frame.show_window(a)
+	
+	app.loop()
+	
Index: Assignment4/GroupAPI.py
===================================================================
--- Assignment4/GroupAPI.py	(revision 0)
+++ Assignment4/GroupAPI.py	(revision 0)
@@ -0,0 +1,75 @@
+#-------------------------GROUP	MEMBERS------------------------------
+#
+#	AMRITPAL SINGH	P2010CS1007	(Tkinter)
+#	RAMANJIT SINGH	P2010CS1034	(PyQt4)
+#	VIKAS CHOUDHARY	P2010CS1038	(WxPython)
+#	NABH CHOUDHARY	P2010CS1067	(PyGtk)
+#
+#--------------------------------------------------------------------
+
+#--------------------------------------------------------------------
+#API Summary:-
+#--------------------------------------------------------------------
+
+Class Windows:
+
+		def __init__(self, title, x_position, y_position, width, height):pass
+		def change_title(self, new_title):pass
+		def move_to_centre(self):pass
+		def show_window(self, box):pass
+		def change_color(self,color):pass
+		def reset_color(self):pass
+		
+Class Statictext:
+
+		def __init__(self, frame, text):pass
+		def set_text(self, text) :pass
+		
+		
+Class SingleTextBox:
+
+		def __init__(self, frame, text_visibility) :pass
+		def set_text(self, text) :pass
+		def get_text(self) :pass		 				
+		
+		
+Class MultiTextBox:
+
+		def __init__(self, frame):pass
+		
+
+Class button:
+
+		def __init__(self, frame, Label):pass
+		def bind(self, function, *args):pass
+		
+		
+Class RadioButtonList:
+
+		def __init__(self, frame, Labels_list, choice1, choice2, static_text_obj, grid, start):pass
+		
+Class CheckBox:
+		
+		def __init__(self, frame, checkbox_label):pass 
+		def bind(self, function, *args):pass
+		def get_state(self):pass
+		
+Class ComboBox:
+		
+		def __init(self, frame, name, combo_list):pass	
+	
+		
+Class Alignment:
+
+		def __init__(self, frame):pass
+		def add(self,Widget, row, column, columnspan):pass		
+		
+Class App:
+		
+		def __init(self):pass
+		def loop(self):pass
+		
+#--------------------------------------------------------------------
+#Description about these classes and functions is documented in trac.
+#--------------------------------------------------------------------
+
Index: Assignment4/P2010CS1067_WxPython.py
===================================================================
--- Assignment4/P2010CS1067_WxPython.py	(revision 0)
+++ Assignment4/P2010CS1067_WxPython.py	(revision 0)
@@ -0,0 +1,142 @@
+import wx
+class Windows(wx.Frame):
+	def __init__(self, title,x,y, width, height):
+		wx.Frame.__init__(self,None , wx.NewId(), title, pos=(x, y), size= (width, height))
+		self.panel=wx.Panel(self)
+			
+	def show_window(self,box):
+		self.panel.SetSizer(box.widget)												
+		self.Show()
+		
+	def change_title(self,title):
+		self.SetTitle(title)
+		
+	def change_color(self,color):
+		self.panel.SetBackgroundColour(color) 
+		
+	def reset_color(self):
+		self.panel.SetBackgroundColour(wx.NullColor) 
+		
+	def move_to_centre(self):
+		self.Centre()
+	
+	def close_window(self):
+		self.Destroy()
+	
+class RadioButtonList():
+	def __init__(self,frm,group,ch1,ch2,st,grid,start):
+		self.ch1=ch1
+		self.ch2=ch2
+		self.num=len(group)
+		self.group=group
+		self.st=st.widget
+		self.grid=grid
+		self.start=start
+		self.rb={}
+		
+		for i in range(0,self.num):
+			self.rb[i]=wx.RadioButton(frm.panel, label=group[i])
+			self.rb[i].Bind(wx.EVT_RADIOBUTTON, self.onclick)
+			self.grid.widget.Add(self.rb[i],pos=(start+i,0) )
+			
+	def onclick(self,event):
+		if(self.ch1==1):
+			if(self.rb[self.ch2-1].GetValue()):
+				self.st.SetLabel('true')
+			else:
+				self.st.SetLabel('false')
+		else:
+			for i in range(0,self.num):
+				if(self.rb[i].GetValue()):
+					self.st.SetLabel('Your choice:'+self.group[i])
+					
+		
+class Statictext(wx.StaticText):
+	def __init__(self,frm,text):
+		self.widget=wx.StaticText(frm.panel,label='')
+		self.widget.SetLabel(text)
+	def set_text(self,text):
+		self.widget.SetLabel(text)
+		
+	
+class button(wx.Button):
+	def __init__(self,frm,text):
+		self.widget=wx.Button(frm.panel,label=text)
+	def	bind(self,fn,*args):
+		self.widget.Bind(wx.EVT_BUTTON, fn)
+			
+			
+class SingleTextBox(wx.TextCtrl):
+	def __init__(self,frm,visibility):
+		self.panel=frm.panel
+		if(visibility==1):
+			self.widget=wx.TextCtrl(self.panel, style=wx.TE_PROCESS_ENTER)
+		if(visibility==0):
+			self.widget=wx.TextCtrl(self.panel, style=wx.TE_PROCESS_ENTER | wx.TE_PASSWORD)
+		
+	def set_text(self,text):
+		self.widget.SetValue(text)
+		
+	def get_text(self):
+		return self.widget.GetValue()
+	
+class MultiTextBox(wx.TextCtrl):
+	def __init__(self,frm):		
+		self.panel=frm.panel
+		self.widget=wx.TextCtrl(self.panel, style = wx.TE_READONLY | wx.TE_MULTILINE)
+		
+	def set_text(self,text):
+		self.widget.SetValue(text)
+		
+	def get_text(self):
+		return self.widget.GetValue()
+
+class Halignment(wx.BoxSizer):
+	def __init__(self):
+		self.widget=wx.BoxSizer(wx.HORIZONTAL)
+			
+	def add(self,field,border):
+		self.border=border
+		self.widget.Add(field.widget, proportion = 0, flag = wx.EXPAND|wx.BOTTOM|wx.TOP, border=self.border)
+		
+
+class Valignment(wx.BoxSizer):
+	def __init__(self):
+		self.widget=wx.BoxSizer(wx.VERTICAL)
+	def add(self,field,border):
+		self.border=border
+		self.widget.Add(field.widget, proportion = 0, flag = wx.EXPAND|wx.BOTTOM|wx.TOP, border=self.border)	
+		
+	
+class Alignment(wx.StaticBoxSizer):
+	def __init__(self,frm):
+		self.widget = wx.GridBagSizer(5, 5)
+		
+	def add(self,field,row,column,columnspan):
+		self.widget.Add(field.widget, pos=(row,column), span=(1,columnspan), flag=wx.EXPAND, border=5)
+
+class ComboBox(wx.ComboBox):
+	def __init__(self,frm,name,group):
+		self.widget=wx.ComboBox(frm.panel, choices=group, style=wx.CB_READONLY)	
+		self.widget.SetValue(name)
+	
+	def get_value(self):
+		return self.widget.GetValue()
+	
+class CheckBox(wx.CheckBox):
+	def __init__(self,frm,text):	
+		self.widget=wx.CheckBox(frm.panel, label=text)	
+	
+	def bind(self,fn,*args):
+		 self.widget.Bind(wx.EVT_CHECKBOX, fn)
+	
+	def get_state(self):
+		return self.widget.GetValue()
+	
+class App(wx.App):
+	def __init__(self):
+		self.app = wx.App(redirect=False)
+	def loop(self):
+		self.app.MainLoop()	
+		
+
