Index: Assignment5/Assignment5_Testing.py
===================================================================
--- Assignment5/Assignment5_Testing.py	(revision 0)
+++ Assignment5/Assignment5_Testing.py	(revision 0)
@@ -0,0 +1,38 @@
+import Assignment5 as pwd	#Name of file having password validation method
+import unittest
+
+class Unit_test_for_validation(unittest.TestCase):
+	def testcase1(self):																						#Case when password length is < 6.
+		self.check1 = pwd.CheckPassword("ABCDEF","1234qwert","123qw","123qw")
+		self.assertEqual(self.check1,False);
+	
+	def testcase2(self):																						#Case when password length is = 6.
+		self.check2 = pwd.CheckPassword("ABCDEF","1234qwert","123qwe","123qwe")
+		self.assertEqual(self.check2,False);
+	
+	def testcase3(self):																						#Case when password is purely numeric.
+		self.check3 = pwd.CheckPassword("ABCDEF","1234qwert","12345678","1235678")
+		self.assertEqual(self.check3,False);
+	
+	def testcase4(self):																						#Case when password is purely alphabatic.
+		self.check4 = pwd.CheckPassword("ABCDEF","1234qwert","qwertyui","qwertyui")
+		self.assertEqual(self.check4,False);
+	
+	def testcase5(self):																						#Case when password contains special characters.
+		self.check5 = pwd.CheckPassword("ABCDEF","1234qwert","1234qwer$#@!","1234qwer$#@!")
+		self.assertEqual(self.check5,False);
+	
+	def testcase6(self):																						#Case when password field is left empty.
+		self.check6 = pwd.CheckPassword("ABCDEF","1234qwert","1234qwer","")
+		self.assertEqual(self.check6,False);
+	
+	def testcase7(self):																						#Case when passwords do not match.
+		self.check7 = pwd.CheckPassword("ABCDEF","1234qwert","1234qwer","qwer1234")
+		self.assertEqual(self.check7,False);
+		
+	def testcase8(self):																						#Case when password matched and changed.
+		self.check8 = pwd.CheckPassword("ABCDEF","1234qwert","1234qwer","1234qwer")
+		self.assertEqual(self.check8,True);
+
+if __name__=='__main__':
+	unittest.main()
Index: Assignment5/Assignment5.py
===================================================================
--- Assignment5/Assignment5.py	(revision 0)
+++ Assignment5/Assignment5.py	(revision 0)
@@ -0,0 +1,92 @@
+#!/usr/bin/env python
+from P2010CS1034_PyQt import *
+import re						#regular_exp
+
+#--------------------VALIDATION_METHOD---------------------
+
+	#To checks whether a string is alphanumeric or not.
+def AlphaNumeric(password):
+	password_num=re.findall('[0-9]',password)
+	password_alpha=re.findall('[a-zA-Z]',password)
+	password_alpha_num=re.findall('[a-zA-Z0-9]',password)
+	if len(password_alpha_num)==len(password) and len(password_alpha)>0 and len(password_num)>0:
+		return True
+	else:
+		return False
+
+def ReEnter(old_pwd_box,new_pwd_box,cnfrm_pwd_box):
+	old_pwd_box.set_text("")
+	new_pwd_box.set_text("")
+	cnfrm_pwd_box.set_text("")
+
+	#Cheching password validity.
+def CheckPassword(usr_name,old_pwd,new_pwd,cnfrm_pwd):
+	if len(new_pwd)<=6:
+		print "Password must be of more than 6 characters.Please enter again."
+		return False
+	
+	elif AlphaNumeric(new_pwd)==False or AlphaNumeric(cnfrm_pwd)==False:
+		print "Password must contain atleast 1 alphabet,1 digit (Without special characters).Please enter again."
+		return False
+		
+	elif new_pwd!=cnfrm_pwd:
+		print "Password does not match.Please enter again."
+		return False
+		
+	else:
+		print "Password Changed Successfully."
+		return True
+
+	# This function is connected with 'Submit' button in the Change Password application.
+def OnClick(window,usr_name_box,old_pwd_box, new_pwd_box, cnfrm_pwd_box):
+	usr_name=usr_name_box.get_text()
+	old_pwd=old_pwd_box.get_text()
+	new_pwd=new_pwd_box.get_text()
+	cnfrm_pwd=cnfrm_pwd_box.get_text()
+	if CheckPassword(usr_name,old_pwd,new_pwd,cnfrm_pwd)==False:
+		ReEnter(old_pwd_box,new_pwd_box,cnfrm_pwd_box)
+	else:
+		usr_name_box.set_text("")
+		ReEnter(old_pwd_box,new_pwd_box,cnfrm_pwd_box)
+
+#--------------------MAIN FUNCTION---------------------
+
+def main():
+		app = App()
+
+		new=Windows("Change Password",500,250,350,200)
+		grid=Alignment(new)
+
+		Label1 = Statictext(new,"Username		")
+		Label2 = Statictext(new,"Old Password		")
+		Label3 = Statictext(new,"New Password	")
+		Label4 = Statictext(new,"Confirm New Password	")
+
+		line1 = SingleTextBox(new,1)
+		line2 = SingleTextBox(new,0)
+		line3 = SingleTextBox(new,0)
+		line4 = SingleTextBox(new,0)
+		
+		btn1 = button(new,'Submit')
+		btn2 = button(new,'Close')
+		btn1.bind(OnClick,new,line1,line2,line3,line4)
+		btn2.bind(new.close_window)
+		
+		grid.add(Label1,0,0,3)
+		grid.add(line1,0,4,4)
+		grid.add(Label2,1,0,3)
+		grid.add(line2,1,4,4)
+		grid.add(Label3,2,0,3)
+		grid.add(line3,2,4,4)
+		grid.add(Label4,3,0,3)
+		grid.add(line4,3,4,4)
+		grid.add(btn1,4,2,1)
+		grid.add(btn2,4,4,1)
+		
+		new.show_window(grid)
+		app.loop()
+            
+if __name__ == '__main__':
+    main()
+
+
Index: Assignment5/P2010CS1034_PyQt.py
===================================================================
--- Assignment5/P2010CS1034_PyQt.py	(revision 0)
+++ Assignment5/P2010CS1034_PyQt.py	(revision 0)
@@ -0,0 +1,170 @@
+#!/usr/bin/env python
+from PyQt4 import QtCore, QtGui
+from PyQt4.QtGui import *
+import sys
+
+class App(QtGui.QApplication):													#App:- start and loop an application
+	def __init__(self):
+		super(App,self).__init__(sys.argv)
+			
+	def loop(self):
+		return sys.exit(self.exec_())
+
+class Windows(QtGui.QWidget):														#class for making a window:- x & y=position; width & height=window size 
+	def __init__(self,title,x,y,width,height):						# constructor
+		super(Windows, self).__init__(parent=None)
+		self.setWindowTitle(title)
+		self.setGeometry(x,y,width,height)
+		
+	def show_window(self,box):														#setlayout and show window
+		self.setLayout(box)
+		self.show()
+	
+	def change_title(self,title):
+		self.setWindowTitle(title)		
+
+	def move_to_centre(self):															# for centring a window on screen
+		screen = QtGui.QDesktopWidget().screenGeometry()
+		size = self.geometry()
+		self.move((screen.width()-size.width())/2, (screen.height()-size.height())/2)
+		
+	def close_window(self):																# for closing window
+		self.close()
+	
+	def change_color(self,color):													# change color of window
+		self.setStyleSheet("QWidget {background-color: %s; }"%color)
+	
+	def reset_color(self):
+		self.setStyleSheet("QWidget {background-color: %s; }"%None)
+
+class Statictext(QtGui.QLabel):													#Statictext:- text=to make label ,frm=parent window
+	def __init__(self,frm,text):													#constructor
+		super(Statictext, self).__init__(text)
+		
+	def set_text(self,text):
+		self.setText(text)
+
+class button(QtGui.QPushButton):												#button:- name=name of the button; frm=parent window; text=name of button
+	def __init__(self,frm,text):													#method= function to call on clicking; *args=arguments of function
+		super(button, self).__init__(text)
+		self.setFocusPolicy(QtCore.Qt.NoFocus)
+			
+	def bind(self,method,*args):													#bind:- binding button to function
+		if (method!=None and not args) or (method!=None and args[0]==None):
+			self.clicked.connect(method)
+		elif (method!=None and args!=None):
+			self.connect(self,QtCore.SIGNAL('clicked()'),(lambda x = args : method(*x)))
+
+class CheckBox(QtGui.QCheckBox):												#CheckBox:- text=checkbox label; frm=parent window; (value=true or false for activating or deactivating initially)
+	def __init__(self,frm,text):													#constructor
+		super(CheckBox, self).__init__(text)
+		self.setFocusPolicy(QtCore.Qt.NoFocus)
+
+	def get_state(self):																	#state(check/uncheck) of checkbox
+		return self.checkState()
+	
+	def bind(self,method,*args):													#binding to some function
+		if (method!=None and not args) or (method!=None and args[0]==None):
+			self.clicked.connect(method)
+		elif (method!=None and args!=None):
+			self.connect(self,QtCore.SIGNAL('clicked()'),(lambda x = args : method(x)))
+
+class ComboBox(QtGui.QComboBox):												#ComboBox:- name=name of combobox;frm=parent window; group=items to add in combobox
+	def __init__(self,frm,name,group):										#constructor
+		super(ComboBox, self).__init__()
+		self.setFocusPolicy(QtCore.Qt.NoFocus)
+		self.setStyleSheet("QComboBox { combobox-popup: 0; }")
+		if(name!=None):
+			self.addItem(name)
+		for i in group:
+			self.addItem(str(i))
+	
+	def get_value(self):																	#get selected text
+		return self.currentText()
+
+class MultiTextBox(QtGui.QTextEdit):										#MultiTextBox:-multi-line text box; frm=parent window
+	def __init__(self,frm):																#constructor
+		super(MultiTextBox,self).__init__()
+	
+	def set_text(self,text):
+		self.setText(text)
+	
+	def get_text(self):
+		return self.toPlainText()
+
+class SingleTextBox(QtGui.QLineEdit):										#SingleTextBox:-single-line text box; frm=parent window; visibility= 0/1 for password_protected/normal mode
+	def __init__(self,frm,visibility):										#constructor
+		super(SingleTextBox,self).__init__()
+		if visibility==0:
+			self.setEchoMode(self.Password)
+		else:
+			pass
+
+	def set_text(self,text):
+		self.setText(text)
+	
+	def get_text(self):
+		return self.text()
+
+class RadioButtonList(QtGui.QButtonGroup):							#radiobuttonlist:- group=radio button labels
+	def __init__(self,frm,group,ch1,ch2,st,grid,start):		#frm=parent window; ch1=0/1 for info/question; ch2=true answer's no.; st=label; i=row of starting radiobuttons
+		super(RadioButtonList,self).__init__()
+		self.rb={}
+		self.group=group
+		self.i=len(group)
+		self.x=ch1
+		self.y=ch2-1
+		self.text=st
+		for i in range(0,len(group)):
+			self.rb[i]=QtGui.QRadioButton(group[i])
+			self.rb[i].setFocusPolicy(QtCore.Qt.NoFocus)
+			self.rb[i].connect(self.rb[i],QtCore.SIGNAL('clicked()'),self.onclick)
+			self.addButton(self.rb[i],i)
+			grid.add(self.rb[i],start+i,0,1)
+
+	def onclick(self):
+		self.check=self.checkedId()
+		if self.x==1:
+			if self.check==self.y:
+				self.text.set_text("True")
+			else:
+				self.text.set_text("False")
+		elif self.x==0:
+			self.text.set_text( " Selected : " + self.group[self.checkedId()] )
+
+class Halignment(QtGui.QHBoxLayout):										#horizontal box:-alignment= left/right/center alignment of widgets;
+	def __init__(self,*alignment):												#	 list=list of widget/layout; i=row of starting radiobuttons
+		super(Halignment,self).__init__()
+		if alignment and alignment[0]=="right":
+			self.setAlignment(QtCore.Qt.AlignRight)
+		elif alignment and alignment[0]=="left":
+			self.setAlignment(QtCore.Qt.AlignLeft)
+		else:
+			self.setAlignment(QtCore.Qt.AlignHCenter)
+	
+	def add(self,item,i):
+		if(item.isWidgetType()==True):
+				self.addWidget(item)
+		elif(item.isWidgetType()==False):
+				self.addLayout(item)
+
+class Valignment(QtGui.QVBoxLayout):										#vertical box:- list=items to add in vbox; i=row of starting radiobuttons
+		def __init__(self):
+			super(Valignment,self).__init__()
+
+		def add(self,item,i):
+			if(item.isWidgetType()==True):
+				self.addWidget(item)
+			elif(item.isWidgetType()==False):
+				self.addLayout(item)
+
+class Alignment(QtGui.QGridLayout):											#alignment:- making grid; widget=to add to grid; row=row number; column=column number; cspan=colunm span
+	def __init__(self,parent):
+		super(Alignment,self).__init__()
+		
+	def add(self,widget,row,column,cspan):
+			if(widget.isWidgetType()==True):
+				self.addWidget(widget,row,column,1,cspan)
+			elif(widget.isWidgetType()==False):
+				self.addLayout(widget,row,column,1,cspan)
+
