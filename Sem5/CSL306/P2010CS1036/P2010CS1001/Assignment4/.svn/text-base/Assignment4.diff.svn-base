Index: Assignment1_2010cs1001.py
===================================================================
--- Assignment1_2010cs1001.py	(revision 357)
+++ Assignment1_2010cs1001.py	(working copy)
@@ -1,107 +1,170 @@
-#!/usr/bin/python
+import wx
 
-# wxboxsizer.py
+class myWindow(wx.Frame):
+    parent = None
+    def __init__(self,title,X,Y,width,height):
+        self.app = wx.App(False)
+        wx.Frame.__init__(self, self.parent, 1, title, (X,Y),wx.Size(width, height))
+        self.panel = wx.Panel(self, -1)
 
-import wx
-
-class MyFrame(wx.Frame):
-    def __init__(self, parent, id, title):
-        wx.Frame.__init__(self, parent, id, title, (-1, -1), wx.Size(550, 550))
+    def show(self):
+        self.Show(True)
+        self.Centre()
+        self.app.MainLoop()
+        return
+    
+    def close(self):
+        self.Close()
+            
+''' WIDGETS: TextBox '''
+class TextBox(wx.TextCtrl):
+    controller = None
+    def __init__(self,text,X,Y,width,height,cntrl):
+        self.controller=wx.TextCtrl(cntrl.panel, -1, text,  (X,Y), wx.Size(width, height) , style=wx.TE_MULTILINE)
+    
+    def setText(self,text):
+        self.controller.SetValue(text)
+        return True
         
-        panel = wx.Panel(self, -1)
-        panel.SetBackgroundColour("#770000")
-        
-        box = wx.BoxSizer(wx.HORIZONTAL)
-        
-        button1 = wx.Button(panel, -1, 'wxPython') 
-        
-        button2 = wx.Button(panel, -2, 'pygtk') 
-        
-        button3 = wx.Button(panel, -3, 'Exit') 
-        
-        box.Add(button1, 1, wx.EXPAND | wx.ALL,10 )
-       
-        box.Add(button2, 1, wx.EXPAND | wx.ALL,10 )
+    def getText(self):
+        return self.controller.GetValue()
 
-        box.Add(button3, 1, wx.EXPAND | wx.ALL,10 )
+''' WIDGETS: LABEL '''
+class Label(wx.StaticText):
+    def __init__(self,text,X,Y,width,height,cntrl):
+        wx.StaticText(cntrl.panel, -1,text,(X,Y),wx.Size(width,height))
+  
 
-        radiobox = wx.StaticBoxSizer(wx.StaticBox(panel, -1, 'Radios'), orient=wx.VERTICAL)
-        radiobox.Add(wx.RadioButton(panel, -1, 'Forward', style=wx.RB_GROUP))
-        radiobox.Add(wx.RadioButton(panel, -1, 'Backward'))
+''' WIDGETS: Button '''
+class Button(wx.Button):
+    controller = None
+    def __init__(self,title,X,Y,width,height,cntrl):
+        self.controller=wx.Button(cntrl.panel, -1, title, (X,Y), wx.Size(width,height) )
+            
+    def buttonListener(self,method):
+        self.controller.Bind(wx.EVT_BUTTON, method)
         
-        checkbox = wx.StaticBoxSizer(wx.StaticBox(panel, -1, 'Checks'), orient=wx.VERTICAL)
-        
-        checkbox.Add(wx.CheckBox(panel, 1, 'Check 1'))
-        checkbox.Add(wx.CheckBox(panel, 2, 'Check 2'))
-        checkbox.Add(wx.CheckBox(panel, 3, 'Check 3'))
-        
-        sampleList = ["Choice_1","Choice_2","Choice_3","Choice_4","Choice_5","Choice_6","Choice_7","Choice_8","Choice_9"]
-        lb = wx.ListBox(panel,size=wx.DefaultSize,choices=sampleList)
+''' WIDGETS: CheckBox '''
+class CheckBox(wx.CheckBox):
+    controller = None
+    def __init__(self,title,X,Y,width,height,cntrl):
+        self.controller=wx.CheckBox(cntrl.panel, -1, title, (X,Y),wx.Size(width, height))
+    
+    def setCheckState(self,value):
+        self.controller.SetValue(value)
+           
+    def getCheckState(self):
+        return self.controller.IsChecked()
 
+
+''' WIDGETS: MyRadioGroup '''
+class ButtonGroup(wx.RadioButton):
+    controller = []
+    cntrl = None
+    selected_index = None
+    
+    def __init__(self,cntrl):
+         self.cntrl = cntrl
+           
+    def addButtons(self,radiolist):
+         for i in range(1,len(radiolist)):
+               self.controller.append(radiolist[i])
         
-        widgetbox = wx.BoxSizer(wx.VERTICAL)
-        widgetbox.Add(radiobox, 1, wx.ALL, 5)
-        widgetbox.Add(checkbox, 1, wx.ALL, 5)
-        widgetbox.Add(lb, 2, wx.TOP, 15)
-        
-        
-        
-        
-        box.Add(widgetbox, 1, wx.ALL, 15)
 
+    def getValue(self):
+        for i in range(len(self.controller)):
+            if(self.controller[i].GetValue()):
+                return self.controller[i].label
+        return None
+
+''' WIDGETS: RadioButton '''
+class RadioButton(wx.RadioButton):
+    controller = None
+    def __init__(self,title,X,Y,width,height,cntrl):
+        self.controller=wx.RadioButton(cntrl.panel, -1, title, (X,Y),wx.Size(width, height))
+
+    def setChecked(self,value):
+        self.controller.SetValue(value)
+
+    def isChecked(self):
+        return self.controller.GetValue()
+
+''' WIDGETS: ListBox '''
+class ListBox(wx.ListBox):
+     controller=None
+     def __init__(self,value,X,Y,width,height,cntrl):
+         self.controller=wx.ComboBox(cntrl.panel, -1,value,(X,Y),wx.Size(width,height),style=wx.CB_READONLY)
+         
+     def addItems(self,choices):
+         self.controller.SetItems(choices)
+         
+     def Selected(self):
+         return self.controller.GetValue()
+
+
+
+''' ---SAMPLE--- '''
+
+if __name__ == '__main__':
+
+        def call_method(event):
+            print ("\n Your Entered Data \n");
+            print ("****************************\n")
+            print ("Your Name :  "+ tb.getText());
+         #   print ("Your Favourite Tool-Kit is :  "+rbgrp.getValue())
+            if(ck1.getCheckState()==True):
+			   print ("You Love Animals")
+            if(ck2.getCheckState()==True):
+               print("You Love Birds")
+            print("Your Favourite Animal is : "+ listBox.Selected());
+			
+			
+        def exit_method(event):
+            print 'wxPython window made by Abhisaar Sharma'
+            return
         
-        self.Bind(wx.EVT_BUTTON, self.OnClickbut1, id=button1.GetId())
         
-        self.Bind(wx.EVT_BUTTON, self.OnClickbut2, id=button2.GetId())
+        WindowPanel = myWindow('wxPython Window By Abhisaar Sharma' ,50,50,450,400)
         
-        self.Bind(wx.EVT_BUTTON, self.OnClickbut3, id=button3.GetId())
+        #Labels
+        nameLbl=Label("Your Name :",20,15,80,30,WindowPanel)
+        toollbl=Label("Your Favourite Tool-Kit",15,100,140,40,WindowPanel)
+        Listlbl=Label("Your Favourite Animal",280,30,160,60,WindowPanel)
         
-        panel.SetSizer(box)
- 
-        self.Centre()
+        #Buttons
+        btn= Button("Print On Console",30,320,150,50,WindowPanel)
+        btn.buttonListener(call_method)
         
-        self.Show(True)
+        #Checkboxes
+        ck1=CheckBox("I Love Animals ",20,45,150,50,WindowPanel)
+        ck1.setCheckState(0)
+        ck2=CheckBox("I Love Birds ",150,45,150,50,WindowPanel)
+        ck2.setCheckState(2)
         
         
-    def OnClickbut1(self, event):
-        self.Close()
-        MywxFrame(None, -1, 'wxPython.py')
-       
-
-    def OnClickbut2(self, event):
-        self.Close()
-        import k
         
-    def OnClickbut3(self, event):
-        self.Close()    
-
-class MywxFrame(wx.Frame):
-    def __init__(self, parent, id, title):
-        wx.Frame.__init__(self, parent, id, title, (-1, -1), wx.Size(550, 550))
-        panel = wx.Panel(self, -1)
-        panel.SetBackgroundColour("#770000")
+        #Radios
+        rbgrp=ButtonGroup(WindowPanel)
         
-        box = wx.BoxSizer(wx.HORIZONTAL)
+        rb1=RadioButton("PyQT4",10,140,100,20,WindowPanel)
+        rb2=RadioButton("Wx-Python",10,160,100,20,WindowPanel)
+        rb3=RadioButton("PyGTK",10,180,100,20,WindowPanel)
+        rb4=RadioButton("Tkinter",10,200,100,20,WindowPanel)
         
-        button1 = wx.Button(panel, -1, 'x_Exit_x') 
+        rlist=[rb1,rb2,rb3,rb4]
+        rbgrp.addButtons(rlist)
         
-        box.Add(button1, 1, wx.EXPAND | wx.ALL,10 )
-       
-        self.Bind(wx.EVT_BUTTON, self.OnClickbut1, id=button1.GetId())
+        rb1.setChecked(True)
         
-        box.Add(wx.TextCtrl(panel, style=wx.TE_MULTILINE), 2, wx.EXPAND | wx.ALL,10 )
+        #Textbox
+        tb=TextBox("  ",100,15,150,30,WindowPanel)
         
-        panel.SetSizer(box)
+        #Listbox
+        listBox=ListBox("Choose Animal",250,80,180,190,WindowPanel)
+        myList=["Elephant","Peacock","Bear","Lion","Tiger","Leopard","Dog","Cat","Wolf","Spider","Parrot","Nightingale"]
+        listBox.addItems(myList)
         
-        self.Centre()
         
-        self.Show(True)
-        
-    def OnClickbut1(self, event):
-        self.Close()
-
-if __name__ == '__main__':
-        
-         app=wx.App()   
-         frame = MyFrame(None, -1, 'Selector.py')
-         app.MainLoop()
+        Exit_btn= Button("Info",260,320,150,50,WindowPanel)
+        Exit_btn.buttonListener(exit_method)
+        WindowPanel.show()
